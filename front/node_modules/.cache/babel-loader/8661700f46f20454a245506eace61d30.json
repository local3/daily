{"ast":null,"code":"var _jsxFileName = \"/app/src/store/Auth.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { ErrorContext } from './store/ErrorProvider';\nimport axios from 'axios';\nimport { useHistory } from 'react-router'; // 初期状態登録\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialContext = {\n  currentUser: null,\n  isLoggedIn: false\n}; // Context作成。このAuthContextに他のコンポーネントからアクセスすることで、ログイン情報を持ってこれる\n\nconst AuthContext = /*#__PURE__*/React.createContext(initialContext); // Router.jsで使う。propsにRouter.jsでラップしたコンポーネントたちが入る。\n\nconst AuthProvider = props => {\n  _s2();\n\n  // console.log(\"auth\")\n  // URL遷移用\n  const history = useHistory(); // state定義\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [currentUser, setCurrentUser] = useState({}); // 他コンポーネントからauth.loginやauth.logoutの形で呼び出せる。\n  // 呼び出すと、Contextで管理されているログイン情報が更新される\n\n  const login = session => {\n    // setCurrentUser(null)\n    // console.log(isLoggedIn)\n    // console.log(currentUser)\n    axios.post(`/login`, {\n      session: session\n    }).then(res => {\n      setCurrentUser(res.data.data);\n      setIsLoggedIn(true); // console.log(isLoggedIn)\n      // console.log(currentUser)\n\n      history.push('/');\n    });\n  };\n\n  const logout = () => {\n    axios.delete(`/logout`).then(res => {\n      setCurrentUser(null);\n      setIsLoggedIn(false);\n      history.push('/login');\n    });\n  };\n\n  const signup = user => {\n    var _s = $RefreshSig$();\n\n    axios.post(`/users`, {\n      user: user\n    }).then(res => {\n      setCurrentUser(res.data.data);\n      setIsLoggedIn(true);\n      history.push('/');\n    }).catch(_s(err => {\n      _s();\n\n      error = useContext(ErrorContext);\n      error.dispatch({\n        msg: err.response,\n        status: 422\n      });\n    }, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\"));\n  }; // currentユーザーを取得\n\n\n  const fetchCurrentUser = () => {\n    axios.get(`/current_user`).then(res => {\n      setCurrentUser(res.data.data);\n      res.data.data === null ? setIsLoggedIn(false) : setIsLoggedIn(true);\n    });\n  }; // レンダリング後にユーザーの取得を行う\n\n\n  useEffect(() => {\n    fetchCurrentUser();\n  }, []); // 各コンポーネントに最終的に送る内容\n\n  const value = {\n    currentUser,\n    isLoggedIn,\n    login,\n    logout,\n    signup\n  };\n  return (\n    /*#__PURE__*/\n    // .Providerで値を送り、各コンポーネントでuseContext(AuthContext)で情報を受け取る\n    _jsxDEV(AuthContext.Provider, {\n      value: value,\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s2(AuthProvider, \"HXN3fRGyC9qOZn2RcC2mXILIN7M=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthProvider;\nexport { AuthContext, AuthProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/app/src/store/Auth.js"],"names":["React","useState","useEffect","useContext","ErrorContext","axios","useHistory","initialContext","currentUser","isLoggedIn","AuthContext","createContext","AuthProvider","props","history","setIsLoggedIn","setCurrentUser","login","session","post","then","res","data","push","logout","delete","signup","user","catch","err","error","dispatch","msg","response","status","fetchCurrentUser","get","value","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react'\nimport { ErrorContext } from './store/ErrorProvider'\nimport axios from 'axios'\nimport { useHistory } from 'react-router';\n\n// 初期状態登録\nconst initialContext = {\n  currentUser: null,\n  isLoggedIn: false,\n}\n// Context作成。このAuthContextに他のコンポーネントからアクセスすることで、ログイン情報を持ってこれる\nconst AuthContext = React.createContext(initialContext);\n\n// Router.jsで使う。propsにRouter.jsでラップしたコンポーネントたちが入る。\nconst AuthProvider = (props) => {\n  // console.log(\"auth\")\n  // URL遷移用\n  const history = useHistory();\n  // state定義\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n  const [currentUser, setCurrentUser] = useState({})\n\n  // 他コンポーネントからauth.loginやauth.logoutの形で呼び出せる。\n  // 呼び出すと、Contextで管理されているログイン情報が更新される\n  const login = (session) => {\n    // setCurrentUser(null)\n    // console.log(isLoggedIn)\n    // console.log(currentUser)\n    axios.post(`/login`, { session: session })\n      .then(res => {\n        setCurrentUser(res.data.data)\n        setIsLoggedIn(true)\n        // console.log(isLoggedIn)\n        // console.log(currentUser)\n        history.push('/')\n      })\n  }\n\n  const logout = () => {\n    axios.delete(`/logout`)\n      .then(res => {\n        setCurrentUser(null)\n        setIsLoggedIn(false)\n        history.push('/login')\n      })\n  }\n\n  const signup = (user) => {\n    axios.post(`/users`, { user: user })\n      .then(res => {\n        setCurrentUser(res.data.data)\n        setIsLoggedIn(true)\n        history.push('/')\n      })\n\n      .catch(err => {\n        error = useContext(ErrorContext)\n        error.dispatch({msg: err.response, status: 422})\n      })\n  }\n\n  // currentユーザーを取得\n  const fetchCurrentUser = () => {\n    axios.get(`/current_user`)\n      .then(res => {\n        setCurrentUser(res.data.data)\n        res.data.data === null ? setIsLoggedIn(false) : setIsLoggedIn(true)\n      })\n  }\n\n  // レンダリング後にユーザーの取得を行う\n  useEffect(() => {\n    fetchCurrentUser()\n  }, []);\n\n  // 各コンポーネントに最終的に送る内容\n  const value = {currentUser, isLoggedIn, login, logout, signup}\n\n  return (\n    // .Providerで値を送り、各コンポーネントでuseContext(AuthContext)で情報を受け取る\n    <AuthContext.Provider\n      value={value}\n    >\n      { props.children }\n    </AuthContext.Provider>\n  );\n}\n\nexport { AuthContext, AuthProvider };\n"]},"metadata":{},"sourceType":"module"}