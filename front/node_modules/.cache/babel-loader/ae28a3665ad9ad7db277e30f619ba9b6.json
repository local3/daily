{"ast":null,"code":"var _jsxFileName = \"/app/src/store/Auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router'; // 初期状態登録\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialContext = {\n  currentUser: null,\n  isLoggedIn: false\n}; // Context作成。このAuthContextに他のコンポーネントからアクセスすることで、ログイン情報を持ってこれる\n\nconst AuthContext = /*#__PURE__*/React.createContext(initialContext); // Router.jsで使う。propsにRouter.jsでラップしたコンポーネントたちが入る。\n\nconst AuthProvider = props => {\n  _s();\n\n  // URL遷移用\n  const history = useHistory(); // 他コンポーネントからauth.loginやauth.logoutの形で呼び出せる。\n  // 呼び出すと、Contextで管理されているログイン情報が更新される\n\n  const login = loggedInUser => {\n    // setCurrentUser(null)\n    setCurrentUser(loggedInUser);\n    setIsLoggedIn(true);\n    history.push('/');\n  };\n\n  const logout = () => {\n    setCurrentUser(null);\n    setIsLoggedIn(false);\n    history.push('/login');\n  }; // state定義\n\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [currentUser, setCurrentUser] = useState({}); // currentユーザーを取得\n\n  const fetchCurrentUser = () => {\n    axios.get(`/current_user`).then(res => {\n      setCurrentUser(res.data.data);\n      res.data.data === null ? setIsLoggedIn(false) : setIsLoggedIn(true);\n    });\n  }; // レンダリング後にユーザーの取得を行う\n\n\n  useEffect(() => {\n    fetchCurrentUser();\n  }, []); // 各コンポーネントに最終的に送る内容\n\n  const value = {\n    currentUser,\n    isLoggedIn,\n    login,\n    logout\n  };\n  return (\n    /*#__PURE__*/\n    // .Providerで値を送り、各コンポーネントでuseContext(AuthContext)で情報を受け取る\n    _jsxDEV(AuthContext.Provider, {\n      value: value,\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(AuthProvider, \"HXN3fRGyC9qOZn2RcC2mXILIN7M=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthProvider;\nexport { AuthContext, AuthProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/app/src/store/Auth.js"],"names":["React","useState","useEffect","axios","useHistory","initialContext","currentUser","isLoggedIn","AuthContext","createContext","AuthProvider","props","history","login","loggedInUser","setCurrentUser","setIsLoggedIn","push","logout","fetchCurrentUser","get","then","res","data","value","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,cAA3B,C,CAEA;;;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,WAAW,EAAE,IADQ;AAErBC,EAAAA,UAAU,EAAE;AAFS,CAAvB,C,CAIA;;AACA,MAAMC,WAAW,gBAAGR,KAAK,CAACS,aAAN,CAAoBJ,cAApB,CAApB,C,CAEA;;AACA,MAAMK,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B;AACA,QAAMC,OAAO,GAAGR,UAAU,EAA1B,CAF8B,CAI9B;AACA;;AACA,QAAMS,KAAK,GAAIC,YAAD,IAAkB;AAC9B;AACAC,IAAAA,cAAc,CAACD,YAAD,CAAd;AACAE,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAJ,IAAAA,OAAO,CAACK,IAAR,CAAa,GAAb;AACD,GALD;;AAOA,QAAMC,MAAM,GAAG,MAAM;AACnBH,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAC,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAJ,IAAAA,OAAO,CAACK,IAAR,CAAa,QAAb;AACD,GAJD,CAb8B,CAmB9B;;;AACA,QAAM,CAACV,UAAD,EAAaS,aAAb,IAA8Bf,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACK,WAAD,EAAcS,cAAd,IAAgCd,QAAQ,CAAC,EAAD,CAA9C,CArB8B,CAuB9B;;AACA,QAAMkB,gBAAgB,GAAG,MAAM;AAC7BhB,IAAAA,KAAK,CAACiB,GAAN,CAAW,eAAX,EACGC,IADH,CACQC,GAAG,IAAI;AACXP,MAAAA,cAAc,CAACO,GAAG,CAACC,IAAJ,CAASA,IAAV,CAAd;AACAD,MAAAA,GAAG,CAACC,IAAJ,CAASA,IAAT,KAAkB,IAAlB,GAAyBP,aAAa,CAAC,KAAD,CAAtC,GAAgDA,aAAa,CAAC,IAAD,CAA7D;AACD,KAJH;AAKD,GAND,CAxB8B,CAgC9B;;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,gBAAgB;AACjB,GAFQ,EAEN,EAFM,CAAT,CAjC8B,CAqC9B;;AACA,QAAMK,KAAK,GAAG;AAAClB,IAAAA,WAAD;AAAcC,IAAAA,UAAd;AAA0BM,IAAAA,KAA1B;AAAiCK,IAAAA;AAAjC,GAAd;AAEA;AAAA;AACE;AACA,YAAC,WAAD,CAAa,QAAb;AACE,MAAA,KAAK,EAAEM,KADT;AAAA,gBAGIb,KAAK,CAACc;AAHV;AAAA;AAAA;AAAA;AAAA;AAFF;AAQD,CAhDD;;GAAMf,Y;UAEYN,U;;;KAFZM,Y;AAkDN,SAASF,WAAT,EAAsBE,YAAtB","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useHistory } from 'react-router';\n\n// 初期状態登録\nconst initialContext = {\n  currentUser: null,\n  isLoggedIn: false,\n}\n// Context作成。このAuthContextに他のコンポーネントからアクセスすることで、ログイン情報を持ってこれる\nconst AuthContext = React.createContext(initialContext);\n\n// Router.jsで使う。propsにRouter.jsでラップしたコンポーネントたちが入る。\nconst AuthProvider = (props) => {\n  // URL遷移用\n  const history = useHistory();\n  \n  // 他コンポーネントからauth.loginやauth.logoutの形で呼び出せる。\n  // 呼び出すと、Contextで管理されているログイン情報が更新される\n  const login = (loggedInUser) => {\n    // setCurrentUser(null)\n    setCurrentUser(loggedInUser)\n    setIsLoggedIn(true)\n    history.push('/')\n  }\n\n  const logout = () => {\n    setCurrentUser(null)\n    setIsLoggedIn(false)\n    history.push('/login')\n  }\n\n  // state定義\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n  const [currentUser, setCurrentUser] = useState({})\n\n  // currentユーザーを取得\n  const fetchCurrentUser = () => {\n    axios.get(`/current_user`)\n      .then(res => {\n        setCurrentUser(res.data.data)\n        res.data.data === null ? setIsLoggedIn(false) : setIsLoggedIn(true)\n      })\n  }\n\n  // レンダリング後にユーザーの取得を行う\n  useEffect(() => {\n    fetchCurrentUser()\n  }, []);\n\n  // 各コンポーネントに最終的に送る内容\n  const value = {currentUser, isLoggedIn, login, logout}\n\n  return (\n    // .Providerで値を送り、各コンポーネントでuseContext(AuthContext)で情報を受け取る\n    <AuthContext.Provider\n      value={value}\n    >\n      { props.children }\n    </AuthContext.Provider>\n  );\n}\n\nexport { AuthContext, AuthProvider };\n"]},"metadata":{},"sourceType":"module"}